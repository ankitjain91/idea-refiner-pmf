From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ChatGPT Refactor Bot <ui-cache@smoothbrains.ai>
Date: Sat, 4 Oct 2025 12:30:00 +0000
Subject: [PATCH] chore(ui+perf): streamline visuals with Tile system and add robust caching (API + in-memory + localStorage)

---
 src/components/ui/Tile.tsx                      | 66 ++++++++++++++++++++++++
 src/components/ui/SectionHeading.tsx            | 24 ++++++++
 src/components/ui/Glow.tsx                      | 22 ++++++++
 src/components/tiles/ViralityScoreTile.tsx      | 56 ++++++++++++-------
 src/lib/cache/lru.ts                            | 79 ++++++++++++++++++++++++++
 src/lib/cache/local.ts                          | 41 +++++++++++++
 src/hooks/useCachedQuery.ts                     | 85 ++++++++++++++++++++++++++
 app/api/referrals-count/route.ts                | 62 ++++++++++++++++++++
 pages/api/referrals-count.ts                    | 62 ++++++++++++++++++++
 app/analytics/page.tsx                          | 57 ++++++++++++++----
 10 files changed, 531 insertions(+), 23 deletions(-)
 create mode 100644 src/components/ui/Tile.tsx
 create mode 100644 src/components/ui/SectionHeading.tsx
 create mode 100644 src/components/ui/Glow.tsx
 create mode 100644 src/lib/cache/lru.ts
 create mode 100644 src/lib/cache/local.ts
 create mode 100644 src/hooks/useCachedQuery.ts
 create mode 100644 app/api/referrals-count/route.ts
 create mode 100644 pages/api/referrals-count.ts

diff --git a/src/components/ui/Tile.tsx b/src/components/ui/Tile.tsx
new file mode 100644
index 0000000..b1c0a3e
--- /dev/null
+++ b/src/components/ui/Tile.tsx
@@
+import React from "react";
+
+type TileProps = React.PropsWithChildren<{
+  title?: string;
+  subtitle?: string;
+  footer?: React.ReactNode;
+  className?: string;
+}>;
+
+/**
+ * A polished, reusable card with world-class defaults:
+ * - rounded corners, soft shadow, subtle gradient
+ * - consistent padding and typography
+ */
+export default function Tile({ title, subtitle, footer, className = "", children }: TileProps) {
+  return (
+    <div
+      className={[
+        "rounded-2xl p-5 border",
+        "bg-[radial-gradient(1200px_400px_at_0%_0%,rgba(0,0,0,0.03),transparent)]",
+        "shadow-sm hover:shadow md:transition-shadow",
+        className,
+      ].join(" ")}
+    >
+      {(title || subtitle) && (
+        <div className="mb-3">
+          {title && <div className="text-lg font-semibold tracking-tight">{title}</div>}
+          {subtitle && <div className="text-xs opacity-70">{subtitle}</div>}
+        </div>
+      )}
+      <div className="space-y-3">{children}</div>
+      {footer && <div className="mt-4 pt-3 border-t">{footer}</div>}
+    </div>
+  );
+}
diff --git a/src/components/ui/SectionHeading.tsx b/src/components/ui/SectionHeading.tsx
new file mode 100644
index 0000000..a2a2a2a
--- /dev/null
+++ b/src/components/ui/SectionHeading.tsx
@@
+import React from "react";
+
+export default function SectionHeading({ children }: { children: React.ReactNode }) {
+  return (
+    <h2 className="text-xl font-semibold tracking-tight flex items-center gap-2">
+      <span className="inline-block w-1.5 h-1.5 rounded-full bg-black/70" />
+      {children}
+    </h2>
+  );
+}
diff --git a/src/components/ui/Glow.tsx b/src/components/ui/Glow.tsx
new file mode 100644
index 0000000..a3a3a3a
--- /dev/null
+++ b/src/components/ui/Glow.tsx
@@
+import React from "react";
+
+export default function Glow({ className = "" }: { className?: string }) {
+  return (
+    <div
+      aria-hidden
+      className={[
+        "pointer-events-none absolute -z-10 blur-2xl opacity-30",
+        "bg-gradient-to-tr from-fuchsia-400 via-sky-400 to-emerald-400",
+        "w-[40rem] h-[40rem] rounded-full",
+        className,
+      ].join(" ")}
+    />
+  );
+}
diff --git a/src/components/tiles/ViralityScoreTile.tsx b/src/components/tiles/ViralityScoreTile.tsx
index 2222222..c4c4c4c 100644
--- a/src/components/tiles/ViralityScoreTile.tsx
+++ b/src/components/tiles/ViralityScoreTile.tsx
@@
-import React, { useMemo, useState } from "react";
-import { ShareButtons } from "@/components/shared/ShareButtons";
+import React, { useMemo, useState } from "react";
+import Tile from "@/components/ui/Tile";
+import { ShareButtons } from "@/components/shared/ShareButtons";
@@
-export default function ViralityScoreTile() {
-  const [inputs, setInputs] = useState<Inputs>({
+export default function ViralityScoreTile() {
+  const [inputs, setInputs] = useState<Inputs>({
@@
-  return (
-    <div className="rounded-2xl border p-4 flex flex-col gap-3">
-      <div className="text-lg font-semibold">Virality Score</div>
-      <div className="text-4xl font-bold">{score}</div>
-      <div className="text-sm opacity-80">Tweak inputs to see how virality changes</div>
+  return (
+    <Tile title="Virality Score" subtitle="Tweak inputs to see how virality changes" className="relative overflow-hidden">
+      <div className="text-5xl font-bold tracking-tight">{score}</div>
@@
-      <div className="grid grid-cols-2 gap-3 text-sm">
+      <div className="grid grid-cols-2 gap-3 text-sm">
@@
-      </div>
-
-      <ShareButtons title="My Virality Score" summary={`${score} — tuned live on SmoothBrains`} />
-    </div>
+      </div>
+      <ShareButtons title="My Virality Score" summary={`${score} — tuned live on SmoothBrains`} />
+    </Tile>
   );
 }
diff --git a/src/lib/cache/lru.ts b/src/lib/cache/lru.ts
new file mode 100644
index 0000000..d1d1d1d
--- /dev/null
+++ b/src/lib/cache/lru.ts
@@
+type Entry<V> = { value: V; expiresAt: number };
+
+export default class LRUCache<K, V> {
+  private max: number;
+  private store = new Map<K, Entry<V>>();
+
+  constructor(max = 200) { this.max = max; }
+
+  get(key: K): V | undefined {
+    const e = this.store.get(key);
+    if (!e) return undefined;
+    if (e.expiresAt < Date.now()) { this.store.delete(key); return undefined; }
+    // refresh LRU
+    this.store.delete(key);
+    this.store.set(key, e);
+    return e.value;
+  }
+
+  set(key: K, value: V, ttlMs = 60_000) {
+    const e: Entry<V> = { value, expiresAt: Date.now() + ttlMs };
+    if (this.store.has(key)) this.store.delete(key);
+    this.store.set(key, e);
+    if (this.store.size > this.max) {
+      const first = this.store.keys().next().value;
+      this.store.delete(first);
+    }
+  }
+
+  has(key: K) { return this.get(key) !== undefined; }
+  clear() { this.store.clear(); }
+}
diff --git a/src/lib/cache/local.ts b/src/lib/cache/local.ts
new file mode 100644
index 0000000..d2d2d2d
--- /dev/null
+++ b/src/lib/cache/local.ts
@@
+export function setLocal<T>(key: string, value: T, ttlMs = 60_000) {
+  try {
+    const payload = { v: value, e: Date.now() + ttlMs };
+    localStorage.setItem(key, JSON.stringify(payload));
+  } catch {}
+}
+
+export function getLocal<T>(key: string): T | null {
+  try {
+    const raw = localStorage.getItem(key);
+    if (!raw) return null;
+    const { v, e } = JSON.parse(raw);
+    if (Date.now() > e) { localStorage.removeItem(key); return null; }
+    return v as T;
+  } catch { return null; }
+}
diff --git a/src/hooks/useCachedQuery.ts b/src/hooks/useCachedQuery.ts
new file mode 100644
index 0000000..d3d3d3d
--- /dev/null
+++ b/src/hooks/useCachedQuery.ts
@@
+import { useEffect, useState } from "react";
+import LRUCache from "@/lib/cache/lru";
+import { getLocal, setLocal } from "@/lib/cache/local";
+
+// single-process in-memory cache
+const mem = new LRUCache<string, any>(300);
+
+/**
+ * Generic cached query hook:
+ * - Memory cache (fast) + localStorage fallback (survives reloads)
+ * - TTL controls
+ * - Works with any async loader()
+ */
+export default function useCachedQuery<T>(key: string, loader: () => Promise<T>, ttlMs = 60_000) {
+  const [data, setData] = useState<T | null>(() => {
+    const m = mem.get(key);
+    if (m !== undefined) return m as T;
+    const l = getLocal<T>(key);
+    return l;
+  });
+  const [loading, setLoading] = useState(!data);
+  const [error, setError] = useState<Error | null>(null);
+
+  useEffect(() => {
+    let mounted = true;
+    (async () => {
+      try {
+        setLoading(true);
+        const fresh = await loader();
+        if (!mounted) return;
+        setData(fresh);
+        mem.set(key, fresh, ttlMs);
+        setLocal(key, fresh, ttlMs);
+      } catch (e: any) {
+        if (!mounted) return;
+        setError(e);
+      } finally {
+        if (mounted) setLoading(false);
+      }
+    })();
+    return () => { mounted = false; };
+  // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [key]);
+
+  return { data, loading, error, refresh: async () => {
+    const fresh = await loader();
+    setData(fresh);
+    mem.set(key, fresh, ttlMs);
+    setLocal(key, fresh, ttlMs);
+    return fresh;
+  }};
+}
diff --git a/app/api/referrals-count/route.ts b/app/api/referrals-count/route.ts
new file mode 100644
index 0000000..e1e1e1e
--- /dev/null
+++ b/app/api/referrals-count/route.ts
@@
+import { NextResponse } from "next/server";
+import { createClient } from "@supabase/supabase-js";
+
+export const runtime = "edge"; // faster & cacheable
+
+export async function GET() {
+  const supabase = createClient(
+    process.env.SUPABASE_URL!,
+    process.env.SUPABASE_SERVICE_ROLE_KEY!
+  );
+  const { count } = await supabase.from("referrals").select("*", { count: "exact", head: true }).eq("status", "credited");
+  const res = NextResponse.json({ count: count ?? 0 });
+  // 5 minutes CDN cache, SWR 1 hour
+  res.headers.set("Cache-Control", "public, s-maxage=300, stale-while-revalidate=3600");
+  return res;
+}
diff --git a/pages/api/referrals-count.ts b/pages/api/referrals-count.ts
new file mode 100644
index 0000000..e2e2e2e
--- /dev/null
+++ b/pages/api/referrals-count.ts
@@
+import type { NextApiRequest, NextApiResponse } from "next";
+import { createClient } from "@supabase/supabase-js";
+
+export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!);
+  const { count } = await supabase.from("referrals").select("*", { count: "exact", head: true }).eq("status", "credited");
+  res.setHeader("Cache-Control", "public, s-maxage=300, stale-while-revalidate=3600");
+  res.status(200).json({ count: count ?? 0 });
+}
diff --git a/app/analytics/page.tsx b/app/analytics/page.tsx
index 5555555..f0f0f0f 100644
--- a/app/analytics/page.tsx
+++ b/app/analytics/page.tsx
@@
-"use client";
-import { useEffect, useState } from "react";
-import { createClient } from "@supabase/supabase-js";
-
-const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!);
-
-export default function Analytics() {
-  const [referrals, setReferrals] = useState<number>(0);
-  useEffect(() => {
-    (async () => {
-      const { count } = await supabase.from("referrals").select("*", { count: "exact", head: true }).eq("status","credited");
-      setReferrals(count ?? 0);
-    })();
-  }, []);
-  return (
-    <div className="p-6 space-y-6">
-      <h1 className="text-2xl font-bold">Viral Analytics</h1>
-      <div className="rounded-2xl border p-4">
-        <div className="text-sm opacity-70">Credited Referrals</div>
-        <div className="text-3xl font-bold">{referrals}</div>
-      </div>
-    </div>
-  );
-}
+import React from "react";
+import Tile from "@/components/ui/Tile";
+
+export const revalidate = 300; // ISR: rebuild every 5 minutes if App Router is active
+
+async function getReferralsCount() {
+  const res = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || ""}/api/referrals-count`, {
+    next: { revalidate: 300 }, // Next.js caching
+  });
+  const json = await res.json();
+  return json.count ?? 0;
+}
+
+export default async function Analytics() {
+  const referrals = await getReferralsCount();
+  return (
+    <div className="p-6 space-y-6">
+      <h1 className="text-2xl font-bold tracking-tight">Viral Analytics</h1>
+      <Tile title="Credited Referrals">
+        <div className="text-4xl font-bold">{referrals}</div>
+        <div className="text-xs opacity-70">Cached at edge (5m) with SWR for 1h</div>
+      </Tile>
+    </div>
+  );
+}
--
2.46.0
