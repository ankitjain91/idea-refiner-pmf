*** a/tsconfig.json
--- b/tsconfig.json
@@
 {
   "compilerOptions": {
-    "target": "ES2020",
+    "target": "ES2020",
     "lib": ["ES2020", "DOM", "DOM.Iterable"],
     "jsx": "react-jsx",
     "module": "ESNext",
     "moduleResolution": "Bundler",
     "resolveJsonModule": true,
     "isolatedModules": true,
     "noEmit": true,
     "strict": true,
     "skipLibCheck": true,
+    "baseUrl": "src",
+    "paths": {
+      "@/*": ["*"]
+    }
   },
   "include": ["src"]
 }
*** a/vite.config.ts
--- b/vite.config.ts
@@
-import { defineConfig } from 'vite'
-import react from '@vitejs/plugin-react'
+import { defineConfig } from 'vite'
+import react from '@vitejs/plugin-react'
+import tsconfigPaths from 'vite-tsconfig-paths'
 
 // https://vitejs.dev/config/
 export default defineConfig({
-  plugins: [react()],
+  plugins: [react(), tsconfigPaths()],
 })
*** a/package.json
--- b/package.json
@@
   "devDependencies": {
-    "@vitejs/plugin-react": "^4",
+    "@vitejs/plugin-react": "^4",
+    "vite-tsconfig-paths": "^4.3.2",
     "vite": "^5"
   }
 }
*** /dev/null
--- b/src/components/ui/Tile.tsx
@@
+import React from "react";
+
+type TileProps = React.PropsWithChildren<{
+  title?: string;
+  subtitle?: string;
+  footer?: React.ReactNode;
+  className?: string;
+}>;
+
+export default function Tile({ title, subtitle, footer, className = "", children }: TileProps) {
+  return (
+    <div className={["rounded-2xl p-5 border bg-white/70 dark:bg-white/5 shadow-sm hover:shadow transition-shadow", className].join(" ")}>
+      {(title || subtitle) && (
+        <div className="mb-3">
+          {title && <div className="text-lg font-semibold tracking-tight">{title}</div>}
+          {subtitle && <div className="text-xs opacity-70">{subtitle}</div>}
+        </div>
+      )}
+      <div className="space-y-3">{children}</div>
+      {footer && <div className="mt-4 pt-3 border-t">{footer}</div>}
+    </div>
+  );
+}
*** /dev/null
--- b/src/components/ui/SectionHeading.tsx
@@
+import React from "react";
+export default function SectionHeading({ children }: { children: React.ReactNode }) {
+  return (
+    <h2 className="text-xl font-semibold tracking-tight flex items-center gap-2">
+      <span className="inline-block w-1.5 h-1.5 rounded-full bg-black/70" />
+      {children}
+    </h2>
+  );
+}
*** /dev/null
--- b/src/components/layout/AppShell.tsx
@@
+import React from "react";
+import { Link } from "react-router-dom";
+
+export default function AppShell({ children }: { children: React.ReactNode }) {
+  return (
+    <div className="min-h-screen bg-[radial-gradient(1200px_400px_at_0%_0%,rgba(0,0,0,0.04),transparent)]">
+      <header className="sticky top-0 z-40 backdrop-blur bg-white/60 border-b">
+        <div className="max-w-6xl mx-auto px-4 h-14 flex items-center justify-between">
+          <Link to="/" className="font-semibold tracking-tight">SmoothBrains</Link>
+          <nav className="flex items-center gap-4 text-sm">
+            <Link to="/hub" className="opacity-80 hover:opacity-100">Hub</Link>
+            <Link to="/deep-dive" className="opacity-80 hover:opacity-100">Deep Dive</Link>
+            <Link to="/playground" className="opacity-80 hover:opacity-100">Playground</Link>
+            <Link to="/pricing" className="opacity-80 hover:opacity-100">Pricing</Link>
+          </nav>
+        </div>
+      </header>
+      <main className="max-w-6xl mx-auto px-4 py-6">{children}</main>
+      <footer className="border-t py-6 text-xs opacity-70 text-center">© SmoothBrains</footer>
+    </div>
+  );
+}
*** /dev/null
--- b/src/components/shared/ErrorBoundary.tsx
@@
+import React from "react";
+export class ErrorBoundary extends React.Component<{ fallback?: React.ReactNode }, { hasError: boolean }> {
+  constructor(props:any){ super(props); this.state = { hasError:false }; }
+  static getDerivedStateFromError(){ return { hasError: true }; }
+  componentDidCatch(err:any, info:any){ console.error("UI ErrorBoundary:", err, info); }
+  render(){
+    if(this.state.hasError) return this.props.fallback ?? <div className="rounded-2xl border p-4 text-sm">Something went wrong.</div>;
+    return this.props.children;
+  }
+}
*** /dev/null
--- b/src/components/shared/ShareButtons.tsx
@@
+import React from "react";
+export default function ShareButtons({ title, summary }: { title: string; summary: string }) {
+  const url = typeof window !== "undefined" ? window.location.href : "https://smoothbrains.ai";
+  const text = `${title}: ${summary}`;
+  return (
+    <div className="flex gap-3 items-center text-xs opacity-80 mt-2">
+      <a target="_blank" rel="noreferrer" className="underline" href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(url)}`}>Share on X</a>
+      <a target="_blank" rel="noreferrer" className="underline" href={`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`}>Share on LinkedIn</a>
+      <button className="underline" onClick={() => navigator.clipboard.writeText(url)}>Copy link</button>
+    </div>
+  );
+}
*** /dev/null
--- b/src/components/onboarding/OnboardingTour.tsx
@@
+import React, { useEffect, useState } from "react";
+export default function OnboardingTour(){
+  const [open,setOpen]=useState(false);
+  useEffect(()=>{ if(!localStorage.getItem("tour:v1")) setOpen(true); },[]);
+  if(!open) return null;
+  return (
+    <div className="fixed inset-0 z-50 grid place-items-center bg-black/50">
+      <div className="max-w-lg w-full bg-white rounded-2xl p-6 space-y-3 shadow-lg">
+        <div className="text-lg font-semibold tracking-tight">Welcome to SmoothBrains</div>
+        <p className="text-sm opacity-80">Paste your idea → get a product thesis, user stories, and GTM sprints. Use the Hub for quick stats, Deep Dive for world insights, Playground to test messaging.</p>
+        <div className="flex justify-end gap-2">
+          <button className="text-sm underline" onClick={()=>{localStorage.setItem("tour:v1","1"); setOpen(false);}}>Skip</button>
+          <button className="text-sm rounded-xl px-4 py-2 bg-black text-white" onClick={()=>{localStorage.setItem("tour:v1","1"); setOpen(false);}}>Got it</button>
+        </div>
+      </div>
+    </div>
+  );
+}
*** /dev/null
--- b/src/components/help/HelpSpotlight.tsx
@@
+import React, { useState } from "react";
+export default function HelpSpotlight(){
+  const [open,setOpen]=useState(false);
+  return (<>
+    <button className="fixed bottom-4 right-4 rounded-full h-11 w-11 bg-black text-white" onClick={()=>setOpen(true)}>?</button>
+    {open && (
+      <div className="fixed inset-0 z-50 grid place-items-center bg-black/50">
+        <div className="max-w-lg w-full bg-white rounded-2xl p-6 space-y-3 shadow-lg">
+          <div className="text-lg font-semibold tracking-tight">Quick Help</div>
+          <ul className="text-sm list-disc pl-5 space-y-1">
+            <li><b>Hub</b>: snapshot of growth.</li>
+            <li><b>Deep Dive</b>: world map + insights.</li>
+            <li><b>Playground</b>: iterate messaging.</li>
+            <li><b>Share</b>: buttons under key tiles.</li>
+          </ul>
+          <div className="flex justify-end"><button className="text-sm rounded-xl px-4 py-2 bg-black text-white" onClick={()=>setOpen(false)}>Close</button></div>
+        </div>
+      </div>
+    )}
+  </>);
+}
*** /dev/null
--- b/src/pages/LoggedOut.tsx
@@
+import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
+import { Button } from "@/components/ui/button";
+import { Link } from "react-router-dom";
+
+export default function LoggedOut() {
+  return (
+    <div className="min-h-screen grid place-items-center bg-[radial-gradient(1200px_400px_at_0%_0%,rgba(0,0,0,0.03),transparent)]">
+      <Card className="w-full max-w-md">
+        <CardHeader>
+          <CardTitle>Signed out</CardTitle>
+        </CardHeader>
+        <CardContent className="space-y-4">
+          <p className="text-sm opacity-80">You're now logged out. See you soon!</p>
+          <div className="flex gap-2">
+            <Link to="/"><Button variant="ghost">Back to site</Button></Link>
+            <Link to="/login"><Button>Sign in again</Button></Link>
+          </div>
+        </CardContent>
+      </Card>
+    </div>
+  );
+}
*** a/src/App.tsx
--- b/src/App.tsx
@@
-import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
+import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
+import LoggedOut from "@/pages/LoggedOut";
@@
 export default function App() {
   return (
     <BrowserRouter>
       <Routes>
         {/* keep your existing routes */}
+        {/* Branded sign-out destination */}
+        <Route path="/logged-out" element={<LoggedOut />} />
         <Route path="*" element={<Navigate to="/" replace />} />
       </Routes>
     </BrowserRouter>
   );
 }
*** a/src/components/hub/ProfessionalWorldMap.tsx
--- b/src/components/hub/ProfessionalWorldMap.tsx
@@
-import { useState } from "react";
+import { useState, useRef, useEffect } from "react";
@@
-/* Inline SVG or non-satellite map is replaced with a satellite basemap
-   while keeping markers projected via a simple equirectangular projection. */
+// Satellite background + equirectangular projection for markers
+const satUrl =
+  "https://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"; // contains "world.topo.bathy"
+const containerRef = useRef<HTMLDivElement | null>(null);
+const [containerSize, setContainerSize] = useState<{ w: number; h: number }>({ w: 0, h: 0 });
+
+useEffect(() => {
+  const el = containerRef.current;
+  if (!el) return;
+  const ro = new ResizeObserver((entries) => {
+    for (const entry of entries) {
+      const cr = entry.contentRect;
+      setContainerSize({ w: cr.width, h: Math.max(360, cr.width * 0.5) });
+    }
+  });
+  ro.observe(el);
+  return () => ro.disconnect();
+}, []);
+
+const markers = (regions || []).map((r: any) => ({
+  lng: r?.coordinates?.[0] ?? 0,
+  lat: r?.coordinates?.[1] ?? 0,
+  name: r?.name || r?.region || "",
+}));
+
+const project = (lat: number, lng: number) => {
+  const w = containerSize.w || 800;
+  const h = containerSize.h || 400;
+  const x = ((lng + 180) / 360) * w;
+  const y = ((90 - lat) / 180) * h;
+  return { x, y };
+};
@@
-return (
-  /* previous map JSX */
-);
+return (
+  <div ref={containerRef} className="relative w-full rounded-2xl border overflow-hidden" style={{ height: containerSize.h }}>
+    <img src={satUrl} alt="World Satellite" className="absolute inset-0 w-full h-full object-cover" />
+    {markers.map((m, i) => {
+      const p = project(m.lat, m.lng);
+      return (
+        <div
+          key={i}
+          className="absolute -translate-x-1/2 -translate-y-1/2"
+          style={{ left: p.x, top: p.y }}
+        >
+          <div className="flex items-center gap-1">
+            <div className="w-2.5 h-2.5 rounded-full bg-emerald-500 shadow-[0_0_0_2px_rgba(255,255,255,0.9)]" />
+            {m.name ? (
+              <span className="text-[10px] px-1 py-0.5 rounded bg-black/60 text-white">{m.name}</span>
+            ) : null}
+          </div>
+        </div>
+      );
+    })}
+  </div>
+);
*** a/src/components/hub/YouTubeAnalyticsTile.tsx
--- b/src/components/hub/YouTubeAnalyticsTile.tsx
@@
-const confidence = result.confidence;
+const confidence = result?.confidence;

