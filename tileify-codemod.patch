From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ChatGPT UI Sweeper <tileify@smoothbrains.ai>
Date: Sat, 4 Oct 2025 13:05:00 +0000
Subject: [PATCH] chore(ui): add auto Tile wrapper codemod to beautify all tiles without changing content

---
 scripts/wrap-tiles.js           | 213 ++++++++++++++++++++++++++++++++++++++++
 README_TILEIFY.md               |  53 ++++++++++
 2 files changed, 266 insertions(+)
 create mode 100755 scripts/wrap-tiles.js
 create mode 100644 README_TILEIFY.md

diff --git a/scripts/wrap-tiles.js b/scripts/wrap-tiles.js
new file mode 100755
index 0000000..aabbccd
--- /dev/null
+++ b/scripts/wrap-tiles.js
@@
+#!/usr/bin/env node
+/**
+ * Auto-wraps your dashboard tiles with the shared <Tile> component for a world-class look,
+ * WITHOUT changing their content or logic.
+ *
+ * What it does:
+ *  - Finds src/components/tiles/**/*.tsx (and hub/*Grid.tsx, QuickStatsStrip.tsx if present)
+ *  - Injects:   import Tile from "@/components/ui/Tile";
+ *  - Wraps top-level `return (` JSX with <Tile title="ComponentName"> ... </Tile>
+ *  - Respects files already using <Tile>
+ *  - Makes .bak backups alongside originals
+ *
+ * Safe to run multiple times (idempotent).
+ */
+
+const fs = require("fs");
+const path = require("path");
+
+const ROOT = process.cwd();
+const SRC = path.join(ROOT, "src");
+
+function walk(dir, files = []) {
+  if (!fs.existsSync(dir)) return files;
+  for (const entry of fs.readdirSync(dir)) {
+    const full = path.join(dir, entry);
+    const stat = fs.statSync(full);
+    if (stat.isDirectory()) walk(full, files);
+    else files.push(full);
+  }
+  return files;
+}
+
+function guessTitleFromName(filename) {
+  const base = path.basename(filename).replace(/\.(tsx|jsx|ts|js)$/i, "");
+  return base.replace(/([a-z])([A-Z])/g, "$1 $2"); // PascalCase → "Pascal Case"
+}
+
+function ensureTileImport(src) {
+  if (src.includes('from "@/components/ui/Tile"')) return src;
+  // Insert after first import
+  const lines = src.split(/\r?\n/);
+  let insertAt = 0;
+  for (let i = 0; i < lines.length; i++) {
+    if (!lines[i].startsWith("import ")) { insertAt = i; break; }
+  }
+  lines.splice(insertAt, 0, 'import Tile from "@/components/ui/Tile";');
+  return lines.join("\n");
+}
+
+function wrapReturnWithTile(src, title) {
+  if (src.includes("<Tile") && src.includes("</Tile>")) return src; // already wrapped
+  // naive replace: first 'return (' with 'return (<Tile title="...">' and match the *last* closing parenthesis of component
+  // Simpler approach: replace the first-level return block only.
+  const idx = src.indexOf("return (");
+  if (idx === -1) return src;
+  const before = src.slice(0, idx);
+  const after = src.slice(idx + "return (".length);
+  // Find matching close of the top-level parentheses by simple heuristic: last ');' before 'export' or end of file
+  const endIdx = after.lastIndexOf(");");
+  if (endIdx === -1) return src;
+  const inside = after.slice(0, endIdx);
+  const tail = after.slice(endIdx); // includes ');' and after
+  const wrapped = `return (<Tile title="${title}">\n${inside}\n</Tile>` + tail;
+  return before + wrapped;
+}
+
+function processFile(file) {
+  const rel = path.relative(ROOT, file);
+  if (!/\.(tsx|jsx)$/.test(file)) return { rel, changed: false, reason: "not tsx/jsx" };
+  let src = fs.readFileSync(file, "utf8");
+  const original = src;
+  if (/ViralityScoreTile\.tsx$/.test(file)) return { rel, changed: false, reason: "skip virality (already wrapped)" };
+
+  const title = guessTitleFromName(file);
+  src = ensureTileImport(src);
+  src = wrapReturnWithTile(src, title);
+
+  if (src !== original) {
+    fs.writeFileSync(file + ".bak", original, "utf8");
+    fs.writeFileSync(file, src, "utf8");
+    return { rel, changed: true };
+  }
+  return { rel, changed: false, reason: "no-op" };
+}
+
+const targets = [
+  path.join(SRC, "components", "tiles"),
+  path.join(SRC, "components", "hub")
+];
+
+const files = targets.flatMap(d => walk(d)).filter(f => /\.(tsx|jsx)$/.test(f));
+
+const result = files.map(processFile);
+
+const summary = {
+  scanned: files.length,
+  changed: result.filter(r => r.changed).length,
+  details: result,
+};
+
+console.log(JSON.stringify(summary, null, 2));
+
+console.log("\n✅ Done. Backups saved as *.bak next to changed files.");
+console.log("Tip: run git diff to review, then remove .bak files after merge.");
+
diff --git a/README_TILEIFY.md b/README_TILEIFY.md
new file mode 100644
index 0000000..ddeeff0
--- /dev/null
+++ b/README_TILEIFY.md
@@
+# Tileify — Make every dashboard card look premium
+
+This codemod wraps your existing tiles and hub cards with the shared **`<Tile />`** component for consistent, world-class visuals **without modifying content**.
+
+## Run
+```bash
+node scripts/wrap-tiles.js
+```
+It will:
+- add `import Tile from "@/components/ui/Tile";` if missing
+- wrap top-level `return (` with `<Tile title="ComponentName"> ... </Tile>`
+- create a `.bak` backup for each changed file
+
+## Review
+```bash
+git status
+git diff
+```
+If everything looks good:
+```bash
+find src -name "*.bak" -delete
+```
+
+> Safe to re-run. It skips files that already use `<Tile>`.
+
